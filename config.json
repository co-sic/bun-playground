{"engineConfig":{"defaultFlushInterval":"500","datasourceConfigurations":[{"kind":"GRAPHQL","rootNodes":[{"typeName":"Mutation","fieldNames":["test"]},{"typeName":"Query","fieldNames":["dummy"]}],"childNodes":[{"typeName":"TestPayload","fieldNames":["success"]}],"overrideFieldPathFromAlias":true,"customGraphql":{"fetch":{"url":{"staticVariableContent":"http://localhost:4500/graphql"},"method":"POST","body":{},"baseUrl":{},"path":{}},"subscription":{"enabled":true,"url":{"staticVariableContent":"http://localhost:4500/graphql"},"protocol":"GRAPHQL_SUBSCRIPTION_PROTOCOL_WS"},"federation":{"enabled":true,"serviceSdl":"input PersonNameInput {\n    firstName: String!\n    lastName: String!\n}\n\n\ninput SignatureInput {\n    recipientName: PersonNameInput!\n    differentSignerName: PersonNameInput\n}\n\ninput TestInput {\n    signature: SignatureInput\n}\n\ntype TestPayload {\n    success: Boolean!\n}\n\n\ntype Mutation {\n    test(input: TestInput): TestPayload!\n}\n\ntype Query {\n    dummy: String\n}"},"upstreamSchema":{"key":"39261dec9fbf85788f233a1f11dcc1fb04b9da2b"}},"requestTimeoutSeconds":"10","id":"0"}],"fieldConfigurations":[{"typeName":"Mutation","fieldName":"test","argumentsConfiguration":[{"name":"input","sourceType":"FIELD_ARGUMENT"}]}],"graphqlSchema":"directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ninput PersonNameInput {\n  firstName: String!\n  lastName: String!\n}\n\ninput SignatureInput {\n  recipientName: PersonNameInput!\n  differentSignerName: PersonNameInput\n}\n\ninput TestInput {\n  signature: SignatureInput\n}\n\ntype TestPayload {\n  success: Boolean!\n}\n\ntype Mutation {\n  test(input: TestInput): TestPayload!\n}\n\ntype Query {\n  dummy: String\n}","stringStorage":{"39261dec9fbf85788f233a1f11dcc1fb04b9da2b":"schema {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @eventsPublish(sourceID: String, topic: String!) on FIELD_DEFINITION\n\ndirective @eventsRequest(sourceID: String, topic: String!) on FIELD_DEFINITION\n\ndirective @eventsSubscribe(sourceID: String, topic: String!) on FIELD_DEFINITION\n\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: openfed__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @provides(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: openfed__FieldSet!) on FIELD_DEFINITION\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ntype Mutation {\n  test(input: TestInput): TestPayload!\n}\n\ninput PersonNameInput {\n  firstName: String!\n  lastName: String!\n}\n\ntype Query {\n  dummy: String\n}\n\ninput SignatureInput {\n  differentSignerName: PersonNameInput\n  recipientName: PersonNameInput!\n}\n\ninput TestInput {\n  signature: SignatureInput\n}\n\ntype TestPayload {\n  success: Boolean!\n}\n\nscalar openfed__FieldSet"}},"subgraphs":[{"id":"0","name":"server","routingUrl":"http://localhost:4500/graphql"}]}